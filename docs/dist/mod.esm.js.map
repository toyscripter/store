{
  "version": 3,
  "sources": ["../../mod.ts"],
  "sourcesContent": ["export class ToyStore {\n  private dbName: string;\n  private storeName: string;\n\n  constructor(dbName: string = \"ToyStoreDB\", storeName: string = \"ToyStore\") {\n    this.dbName = dbName;\n    this.storeName = storeName;\n  }\n\n  /** Initialize the database and object store */\n  private initDB(): Promise<IDBDatabase> {\n    return new Promise((resolve, reject) => {\n      const request = indexedDB.open(this.dbName);\n\n      request.onupgradeneeded = () => {\n        const db = request.result;\n        if (!db.objectStoreNames.contains(this.storeName)) {\n          db.createObjectStore(this.storeName);\n        }\n      };\n\n      request.onsuccess = () => resolve(request.result);\n      request.onerror = () => reject(request.error);\n    });\n  }\n\n  /** Set a key-value pair in the storage */\n  async set(key: string, value: unknown): Promise<void> {\n    const db = await this.initDB();\n    return new Promise((resolve, reject) => {\n      const transaction = db.transaction(this.storeName, \"readwrite\");\n      const store = transaction.objectStore(this.storeName);\n      const request = store.put(value, key);\n\n      request.onsuccess = () => resolve();\n      request.onerror = () => reject(request.error);\n    });\n  }\n\n  /** Get the value associated with a key from the storage */\n  async get<T>(key: string): Promise<T | undefined> {\n    const db = await this.initDB();\n    return new Promise((resolve, reject) => {\n      const transaction = db.transaction(this.storeName, \"readonly\");\n      const store = transaction.objectStore(this.storeName);\n      const request = store.get(key);\n\n      request.onsuccess = () => resolve(request.result as T);\n      request.onerror = () => reject(request.error);\n    });\n  }\n}\n"],
  "mappings": "AAAO,IAAMA,EAAN,KAAe,CACZ,OACA,UAER,YAAYC,EAAiB,aAAcC,EAAoB,WAAY,CACzE,KAAK,OAASD,EACd,KAAK,UAAYC,CACnB,CAGQ,QAA+B,CACrC,OAAO,IAAI,QAAQ,CAACC,EAASC,IAAW,CACtC,IAAMC,EAAU,UAAU,KAAK,KAAK,MAAM,EAE1CA,EAAQ,gBAAkB,IAAM,CAC9B,IAAMC,EAAKD,EAAQ,OACdC,EAAG,iBAAiB,SAAS,KAAK,SAAS,GAC9CA,EAAG,kBAAkB,KAAK,SAAS,CAEvC,EAEAD,EAAQ,UAAY,IAAMF,EAAQE,EAAQ,MAAM,EAChDA,EAAQ,QAAU,IAAMD,EAAOC,EAAQ,KAAK,CAC9C,CAAC,CACH,CAGA,MAAM,IAAIE,EAAaC,EAA+B,CACpD,IAAMF,EAAK,MAAM,KAAK,OAAO,EAC7B,OAAO,IAAI,QAAQ,CAACH,EAASC,IAAW,CAGtC,IAAMC,EAFcC,EAAG,YAAY,KAAK,UAAW,WAAW,EACpC,YAAY,KAAK,SAAS,EAC9B,IAAIE,EAAOD,CAAG,EAEpCF,EAAQ,UAAY,IAAMF,EAAQ,EAClCE,EAAQ,QAAU,IAAMD,EAAOC,EAAQ,KAAK,CAC9C,CAAC,CACH,CAGA,MAAM,IAAOE,EAAqC,CAChD,IAAMD,EAAK,MAAM,KAAK,OAAO,EAC7B,OAAO,IAAI,QAAQ,CAACH,EAASC,IAAW,CAGtC,IAAMC,EAFcC,EAAG,YAAY,KAAK,UAAW,UAAU,EACnC,YAAY,KAAK,SAAS,EAC9B,IAAIC,CAAG,EAE7BF,EAAQ,UAAY,IAAMF,EAAQE,EAAQ,MAAW,EACrDA,EAAQ,QAAU,IAAMD,EAAOC,EAAQ,KAAK,CAC9C,CAAC,CACH,CACF",
  "names": ["ToyStore", "dbName", "storeName", "resolve", "reject", "request", "db", "key", "value"]
}
