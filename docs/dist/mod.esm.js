var a=class{dbName;storeName;constructor(e="ToyStoreDB",r="ToyStore"){this.dbName=e,this.storeName=r}initDB(){return new Promise((e,r)=>{let t=indexedDB.open(this.dbName);t.onupgradeneeded=()=>{let s=t.result;s.objectStoreNames.contains(this.storeName)||s.createObjectStore(this.storeName)},t.onsuccess=()=>e(t.result),t.onerror=()=>r(t.error)})}async set(e,r){let t=await this.initDB();return new Promise((s,i)=>{let n=t.transaction(this.storeName,"readwrite").objectStore(this.storeName).put(r,e);n.onsuccess=()=>s(),n.onerror=()=>i(n.error)})}async get(e){let r=await this.initDB();return new Promise((t,s)=>{let o=r.transaction(this.storeName,"readonly").objectStore(this.storeName).get(e);o.onsuccess=()=>t(o.result),o.onerror=()=>s(o.error)})}};export{a as ToyStore};
//# sourceMappingURL=mod.esm.js.map
