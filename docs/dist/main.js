(()=>{var i=class{dbName;storeName;constructor(t="ToyStoreDB",o="ToyStore"){this.dbName=t,this.storeName=o}initDB(){return new Promise((t,o)=>{let e=indexedDB.open(this.dbName);e.onupgradeneeded=()=>{let s=e.result;s.objectStoreNames.contains(this.storeName)||s.createObjectStore(this.storeName)},e.onsuccess=()=>t(e.result),e.onerror=()=>o(e.error)})}async set(t,o){let e=await this.initDB();return new Promise((s,r)=>{let a=e.transaction(this.storeName,"readwrite").objectStore(this.storeName).put(o,t);a.onsuccess=()=>s(),a.onerror=()=>r(a.error)})}async get(t){let o=await this.initDB();return new Promise((e,s)=>{let r=o.transaction(this.storeName,"readonly").objectStore(this.storeName).get(t);r.onsuccess=()=>e(r.result),r.onerror=()=>s(r.error)})}};var n=new i;(async()=>{await n.set("myKey","myValue");let t=await n.get("myKey");console.log(t)})();async function c(){let t=await n.get("logs")||[];console.log(t);async function o(e){console.log(e);let s=await n.get("logs")||[];console.log(s);let r=[...s,e.value];await n.set("logs",r),console.log(r)}o({value:"test"}),setTimeout(async()=>{n.set("logs",[]),console.log("cleared"),console.log(await n.get("logs"))},1e3)}c();})();
//# sourceMappingURL=main.js.map
